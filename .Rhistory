iconv(x, "latin1", "ASCII")          #   NA
options("encoding")
cat("a\U00E9")
require("RStoolbox", quietly = TRUE)
cat("b\U00E9")
cat("a\U00E9")
suppressMessages(suppressWarnings(require("RStoolbox", quietly = TRUE)))
cat("b\U00E9")
?source
sessionInfo()
install.packages("RStoolbox")
update.packages(ask=FALSE)
install.packages("rgeos")
sessionInfo()
Sys.setlocale(locale="French_France.1252")
Sys.getlocale()
target <- "\n\nà â ï î é è ô ü ç\n\n"
cat(target)
library(RStoolbox)
cat(target)
quit("no")
chooseCRANmirror() # Choisir le 0-Cloud
upgrade(packageStatus(), ask = FALSE)
setwd("D:/METHODES/160315_REVENUS_LINE/")
library(spdep)
library(packcircles)
library(ggplot2)
library(rgdal)
library(rgeos)
# http://qgis.org/api/qgsexpression_8cpp_source.html#l00575
scaleData = function(val, domainMin, domainMax, rangeMin, rangeMax, exponent=2, method="linear") {
if (method="linear") {
m = ( rangeMax - rangeMin ) / ( domainMax - domainMin )
d = m * (val - domainMin) + rangeMin
} else {
d = (((rangeMax - rangeMin) / (domainMax - domainMin)^exponent )
* ( val - domainMin)^exponent + rangeMin) ;
}
return(d)
}
radars = function(f, dat, libelles, fact=.7, mult=.9, exponent=2, minFactor=1/6, method="linear") {
## CIRCLES
ncircles <- nrow(f)
meanArea = mean(gArea(f, byid=T))
radii = sqrt((fact*meanArea)/pi)
xyr <- data.frame(
x = coordinates(f)[,1],
y = coordinates(f)[,2],
r = radii)
#
res <- circleLayout(xyr, bbox(f)[1,], bbox(f)[2,], maxiter = 1000)
cat(res$niter, "iterations performed")
circleLayout = res$layout
circles = gBuffer(SpatialPoints(circleLayout[, 1:2]), width=circleLayout[,3], quadsegs=50, byid=T)
circles.df = SpatialPolygonsDataFrame(circles, data=data.frame(id=1:length(circles),
libelle=libelles,
row.names=row.names(circles)))
# # plot(f); plot(circles, add=T)
#
## INI
# nTetes = ncol(dat)
# inc = 2*pi/nTetes
# ang0 = pi/2
#
# ## RADARS
# j = 1
# out = vector(mode="list")
# for (idCircle in 1:nrow(circleLayout)) {
#
#   if (!all(is.na(dat[idCircle, ]))) {
#
#     start = as.matrix(circleLayout[idCircle, 1:2])
#     radius = circleLayout[idCircle, 3]
#
#     domainMin = min(dat[idCircle,])
#     domainMax = max(dat[idCircle,])
#
#     for (i in 1:nTetes) {
#       offsetAngle = (i-1)*inc
#
#       angs = seq(ang0+offsetAngle,
#                  ang0+inc+offsetAngle, length.out=10)
#
#       rangeMin = radius*minFactor
#       rangeMax = radius
#
#       # exponent = 2
#       # mult = .9
#       val = dat[idCircle, i]
#
#       if(val > 0) {
#
#           if (domainMin == domainMax) {
#             d = rangeMin
#           } else {
#             d = mult * scaleData(val, domainMin, domainMax, rangeMin, rangeMax, method=method)
#           }
#
#         pts = cbind((start[1] + d*cos(angs)),
#                     (start[2] + d*sin(angs)))
#
#         SpP = SpatialPolygonsDataFrame(SpatialPolygons(list(Polygons(list(Polygon(rbind(start, pts, start))),
#                                                                      paste(idCircle, i)))),
#                                        dat=data.frame(libelle=libelles[idCircle],
#                                                        idCategorie=i,
#                                                        categorie=names(dat)[i],
#                                                        value=val,
#                                                        row.names=paste(idCircle, i)))
#         out[[j]] = SpP
#         j = j+1
#         print(j)
#       }
#     } # for (i in 1:nTetes) {
#   } # if (!all(is.na(dat[idCircle, ]))) {
# } # for (idCircle in 1:nrow(circleLayout)) {
# rosaces = do.call(rbind, out)
#
# return(list(cercles=circles.df, rosaces=rosaces))
}
iris = readOGR("IN", "iris_paris")
# activites = read.csv2("DATA/ACTIVITES/activites.csv", sep=",")
# iris.df = merge(iris, activites, by.x="DCOMIRIS", by.y="IRIS")
# writeOGR(iris.df, "OUT", "iris.data2", "ESRI Shapefile")
## LECTURE FICHIER
activites = read.csv2("DATA/ACTIVITES/activites_pluscomplet.csv", sep=",")
iris.df = merge(iris, activites, by.x="DCOMIRIS", by.y="IRIS")
## PROFESSIONS
# f=iris; dat=iris.df@data[,22:27]; fact=.7; mult=.9; exponent=2; minFactor=1/6; libelles=f$NOM_IRIS; method="linear"
df = iris.df@data[,c("C12_ACT1564_CS1", "C12_ACT1564_CS2", "C12_ACT1564_CS3", "C12_ACT1564_CS4", "C12_ACT1564_CS5", "C12_ACT1564_CS6")]
prof.iris = radars(f=iris,
dat=df,
libelles=f$NOM_IRIS,
fact=.7, mult=1.5, exponent=2, minFactor=1/6,
method="linear")
radars = function(f, dat, libelles, fact=.7, mult=.9, exponent=2, minFactor=1/6, method="linear") {
## CIRCLES
ncircles <- nrow(f)
meanArea = mean(gArea(f, byid=T))
radii = sqrt((fact*meanArea)/pi)
xyr <- data.frame(
x = coordinates(f)[,1],
y = coordinates(f)[,2],
r = radii)
#
res <- circleLayout(xyr, bbox(f)[1,], bbox(f)[2,], maxiter = 1000)
cat(res$niter, "iterations performed")
circles = gBuffer(SpatialPoints(res$layout[, 1:2]), width=res$layout[,3], quadsegs=50, byid=T)
circles.df = SpatialPolygonsDataFrame(circles, data=data.frame(id=1:length(circles),
libelle=libelles,
row.names=row.names(circles)))
# # plot(f); plot(circles, add=T)
#
# INI
nTetes = ncol(dat)
inc = 2*pi/nTetes
ang0 = pi/2
## RADARS
j = 1
out = vector(mode="list")
for (idCircle in 1:nrow(circleLayout)) {
if (!all(is.na(dat[idCircle, ]))) {
start = as.matrix(circleLayout[idCircle, 1:2])
radius = circleLayout[idCircle, 3]
domainMin = min(dat[idCircle,])
domainMax = max(dat[idCircle,])
for (i in 1:nTetes) {
offsetAngle = (i-1)*inc
angs = seq(ang0+offsetAngle,
ang0+inc+offsetAngle, length.out=10)
rangeMin = radius*minFactor
rangeMax = radius
# exponent = 2
# mult = .9
val = dat[idCircle, i]
if(val > 0) {
if (domainMin == domainMax) {
d = rangeMin
} else {
d = mult * scaleData(val, domainMin, domainMax, rangeMin, rangeMax, method=method)
}
pts = cbind((start[1] + d*cos(angs)),
(start[2] + d*sin(angs)))
SpP = SpatialPolygonsDataFrame(SpatialPolygons(list(Polygons(list(Polygon(rbind(start, pts, start))),
paste(idCircle, i)))),
dat=data.frame(libelle=libelles[idCircle],
idCategorie=i,
categorie=names(dat)[i],
value=val,
row.names=paste(idCircle, i)))
out[[j]] = SpP
j = j+1
print(j)
}
} # for (i in 1:nTetes) {
} # if (!all(is.na(dat[idCircle, ]))) {
} # for (idCircle in 1:nrow(circleLayout)) {
rosaces = do.call(rbind, out)
return(list(cercles=circles.df, rosaces=rosaces))
}
iris = readOGR("IN", "iris_paris")
# activites = read.csv2("DATA/ACTIVITES/activites.csv", sep=",")
# iris.df = merge(iris, activites, by.x="DCOMIRIS", by.y="IRIS")
# writeOGR(iris.df, "OUT", "iris.data2", "ESRI Shapefile")
## LECTURE FICHIER
activites = read.csv2("DATA/ACTIVITES/activites_pluscomplet.csv", sep=",")
iris.df = merge(iris, activites, by.x="DCOMIRIS", by.y="IRIS")
## PROFESSIONS
# f=iris; dat=iris.df@data[,22:27]; fact=.7; mult=.9; exponent=2; minFactor=1/6; libelles=f$NOM_IRIS; method="linear"
df = iris.df@data[,c("C12_ACT1564_CS1", "C12_ACT1564_CS2", "C12_ACT1564_CS3", "C12_ACT1564_CS4", "C12_ACT1564_CS5", "C12_ACT1564_CS6")]
prof.iris = radars(f=iris,
dat=df,
libelles=f$NOM_IRIS,
fact=.7, mult=1.5, exponent=2, minFactor=1/6,
method="linear")
prof.iris = radars(f=iris,
dat=df,
libelles=iris$NOM_IRIS,
fact=.7, mult=1.5, exponent=2, minFactor=1/6,
method="linear")
radars = function(f, dat, libelles, fact=.7, mult=.9, exponent=2, minFactor=1/6, method="linear") {
## CIRCLES
ncircles <- nrow(f)
meanArea = mean(gArea(f, byid=T))
radii = sqrt((fact*meanArea)/pi)
xyr <- data.frame(
x = coordinates(f)[,1],
y = coordinates(f)[,2],
r = radii)
#
res <- circleLayout(xyr, bbox(f)[1,], bbox(f)[2,], maxiter = 1000)
cat(res$niter, "iterations performed")
circles = gBuffer(SpatialPoints(res$layout[, 1:2]), width=res$layout[,3], quadsegs=50, byid=T)
circles.df = SpatialPolygonsDataFrame(circles, data=data.frame(id=1:length(circles),
libelle=libelles,
row.names=row.names(circles)))
# # plot(f); plot(circles, add=T)
#
# INI
nTetes = ncol(dat)
inc = 2*pi/nTetes
ang0 = pi/2
## RADARS
j = 1
out = vector(mode="list")
for (idCircle in 1:nrow(res$layout)) {
if (!all(is.na(dat[idCircle, ]))) {
start = as.matrix(res$layout[idCircle, 1:2])
radius = res$layout[idCircle, 3]
domainMin = min(dat[idCircle,])
domainMax = max(dat[idCircle,])
for (i in 1:nTetes) {
offsetAngle = (i-1)*inc
angs = seq(ang0+offsetAngle,
ang0+inc+offsetAngle, length.out=10)
rangeMin = radius*minFactor
rangeMax = radius
# exponent = 2
# mult = .9
val = dat[idCircle, i]
if(val > 0) {
if (domainMin == domainMax) {
d = rangeMin
} else {
d = mult * scaleData(val, domainMin, domainMax, rangeMin, rangeMax, method=method)
}
pts = cbind((start[1] + d*cos(angs)),
(start[2] + d*sin(angs)))
SpP = SpatialPolygonsDataFrame(SpatialPolygons(list(Polygons(list(Polygon(rbind(start, pts, start))),
paste(idCircle, i)))),
dat=data.frame(libelle=libelles[idCircle],
idCategorie=i,
categorie=names(dat)[i],
value=val,
row.names=paste(idCircle, i)))
out[[j]] = SpP
j = j+1
print(j)
}
} # for (i in 1:nTetes) {
} # if (!all(is.na(dat[idCircle, ]))) {
} # for (idCircle in 1:nrow(circleLayout)) {
rosaces = do.call(rbind, out)
return(list(cercles=circles.df, rosaces=rosaces))
}
prof.iris = radars(f=iris,
dat=df,
libelles=iris$NOM_IRIS,
fact=.7, mult=1.5, exponent=2, minFactor=1/6,
method="linear")
scaleData = function(val, domainMin, domainMax, rangeMin, rangeMax, exponent=2, method="linear") {
if (method="linear") {
m = ( rangeMax - rangeMin ) / ( domainMax - domainMin )
d = m * (val - domainMin) + rangeMin
} else {
d = (((rangeMax - rangeMin) / (domainMax - domainMin)^exponent )
* ( val - domainMin)^exponent + rangeMin) ;
}
return(d)
}
scaleData = function(val, domainMin, domainMax, rangeMin, rangeMax, exponent=2, method="linear") {
if (method="linear") {
m = ( rangeMax - rangeMin ) / ( domainMax - domainMin )
d = m * (val - domainMin) + rangeMin
} else {
d = (((rangeMax - rangeMin) / (domainMax - domainMin)^exponent )
* ( val - domainMin)^exponent + rangeMin) ;
}
return(d)
}
scaleData = function(val, domainMin, domainMax, rangeMin, rangeMax, exponent=2, method="linear") {
if (method="linear") {
m = ( rangeMax - rangeMin ) / ( domainMax - domainMin )
d = m * (val - domainMin) + rangeMin
} else {
d = (((rangeMax - rangeMin) / (domainMax - domainMin)^exponent ) * ( val - domainMin)^exponent + rangeMin) ;
}
return(d)
}
scaleData = function(val, domainMin, domainMax, rangeMin, rangeMax, exponent=2, method="linear") {
if (method == "linear") {
m = ( rangeMax - rangeMin ) / ( domainMax - domainMin )
d = m * (val - domainMin) + rangeMin
} else {
d = (((rangeMax - rangeMin) / (domainMax - domainMin)^exponent ) * ( val - domainMin)^exponent + rangeMin) ;
}
return(d)
}
prof.iris = radars(f=iris,
dat=df,
libelles=iris$NOM_IRIS,
fact=.7, mult=1.5, exponent=2, minFactor=1/6,
method="linear")
plot(prof.iris$cercles); plot(prof.iris$rosaces, add=T)
df
as.numeric(df)
as.vector(df)
radius
radars = function(f, dat, libelles, fact=.7, mult=.9, exponent=2, minFactor=1/6, method="linear") {
## CIRCLES
ncircles <- nrow(f)
meanArea = mean(gArea(f, byid=T))
radii = sqrt((fact*meanArea)/pi)
xyr <- data.frame(
x = coordinates(f)[,1],
y = coordinates(f)[,2],
r = radii)
#
res <- circleLayout(xyr, bbox(f)[1,], bbox(f)[2,], maxiter = 1000)
cat(res$niter, "iterations performed")
circles = gBuffer(SpatialPoints(res$layout[, 1:2]), width=res$layout[,3], quadsegs=50, byid=T)
circles.df = SpatialPolygonsDataFrame(circles, data=data.frame(id=1:length(circles),
libelle=libelles,
row.names=row.names(circles)))
# INI
nTetes = ncol(dat)
inc = 2*pi/nTetes
ang0 = pi/2
## RADARS
j = 1
out = vector(mode="list")
for (idCircle in 1:nrow(res$layout)) {
if (!all(is.na(dat[idCircle, ]))) {
start = as.matrix(res$layout[idCircle, 1:2])
radius = res$layout[idCircle, 3]
domainMin = min(dat[idCircle,])
domainMax = max(dat[idCircle,])
for (i in 1:nTetes) {
offsetAngle = (i-1)*inc
angs = seq(ang0+offsetAngle,
ang0+inc+offsetAngle, length.out=10)
rangeMin = radius*minFactor
rangeMax = radius
# exponent = 2
# mult = .9
val = dat[idCircle, i]
if(val > 0) {
if (domainMin == domainMax) {
d = rangeMin
} else {
d = mult * scaleData(val, domainMin, domainMax, rangeMin, rangeMax, exponent, method=method)
print(d > rangeMax)
}
pts = cbind((start[1] + d*cos(angs)),
(start[2] + d*sin(angs)))
SpP = SpatialPolygonsDataFrame(SpatialPolygons(list(Polygons(list(Polygon(rbind(start, pts, start))),
paste(idCircle, i)))),
dat=data.frame(libelle=libelles[idCircle],
idCategorie=i,
categorie=names(dat)[i],
value=val,
row.names=paste(idCircle, i)))
out[[j]] = SpP
j = j+1
print(j)
}
} # for (i in 1:nTetes) {
} # if (!all(is.na(dat[idCircle, ]))) {
} # for (idCircle in 1:nrow(circleLayout)) {
rosaces = do.call(rbind, out)
return(list(cercles=circles.df, rosaces=rosaces))
}
prof.iris = radars(f=iris,
dat=df,
libelles=iris$NOM_IRIS,
fact=.7, mult=1.5, exponent=2, minFactor=1/6,
method="linear")
radars = function(f, dat, libelles, fact=.7, mult=.9, exponent=2, minFactor=1/6, method="linear") {
## CIRCLES
ncircles <- nrow(f)
meanArea = mean(gArea(f, byid=T))
radii = sqrt((fact*meanArea)/pi)
xyr <- data.frame(
x = coordinates(f)[,1],
y = coordinates(f)[,2],
r = radii)
#
res <- circleLayout(xyr, bbox(f)[1,], bbox(f)[2,], maxiter = 1000)
cat(res$niter, "iterations performed")
circles = gBuffer(SpatialPoints(res$layout[, 1:2]), width=res$layout[,3], quadsegs=50, byid=T)
circles.df = SpatialPolygonsDataFrame(circles, data=data.frame(id=1:length(circles),
libelle=libelles,
row.names=row.names(circles)))
# INI
nTetes = ncol(dat)
inc = 2*pi/nTetes
ang0 = pi/2
## RADARS
j = 1
out = vector(mode="list")
for (idCircle in 1:nrow(res$layout)) {
if (!all(is.na(dat[idCircle, ]))) {
start = as.matrix(res$layout[idCircle, 1:2])
radius = res$layout[idCircle, 3]
domainMin = min(dat[idCircle,])
domainMax = max(dat[idCircle,])
for (i in 1:nTetes) {
offsetAngle = (i-1)*inc
angs = seq(ang0+offsetAngle,
ang0+inc+offsetAngle, length.out=10)
rangeMin = radius*minFactor
rangeMax = radius
# exponent = 2
# mult = .9
val = dat[idCircle, i]
if(val > 0) {
if (domainMin == domainMax) {
d = rangeMin
} else {
d = mult * scaleData(val, domainMin, domainMax, rangeMin, rangeMax, exponent, method=method)
print(d > rangeMax)
}
pts = cbind((start[1] + d*cos(angs)),
(start[2] + d*sin(angs)))
SpP = SpatialPolygonsDataFrame(SpatialPolygons(list(Polygons(list(Polygon(rbind(start, pts, start))),
paste(idCircle, i)))),
dat=data.frame(libelle=libelles[idCircle],
idCategorie=i,
categorie=names(dat)[i],
value=val,
row.names=paste(idCircle, i)))
out[[j]] = SpP
j = j+1
print(j)
}
} # for (i in 1:nTetes) {
} # if (!all(is.na(dat[idCircle, ]))) {
} # for (idCircle in 1:nrow(circleLayout)) {
rosaces = do.call(rbind, out)
return(list(cercles=circles.df, rosaces=rosaces))
}
df = iris.df@data[,c("C12_ACT1564_CS1", "C12_ACT1564_CS2", "C12_ACT1564_CS3", "C12_ACT1564_CS4", "C12_ACT1564_CS5", "C12_ACT1564_CS6")]
prof.iris = radars(f=iris,
dat=df,
libelles=iris$NOM_IRIS,
fact=.7, mult=0.9, exponent=2, minFactor=1/6,
method="linear")
plot(prof.iris$cercles); plot(prof.iris$rosaces, add=T)
writeOGR(prof.iris$cercles, "OUT", "cercles_paris_activites_linear", "ESRI Shapefile", overwrite=T)
writeOGR(prof.iris$rosaces, "OUT", "rosaces_paris_activites_linear", "ESRI Shapefile", overwrite=T)
df = iris.df@data[,c("C12_ACT1564_CS1", "C12_ACT1564_CS2", "C12_ACT1564_CS3", "C12_ACT1564_CS4", "C12_ACT1564_CS5", "C12_ACT1564_CS6")]
prof.iris = radars(f=iris,
dat=df,
libelles=iris$NOM_IRIS,
fact=.7, mult=0.9, exponent=2, minFactor=1/6,
method="power")
plot(prof.iris$cercles); plot(prof.iris$rosaces, add=T)
writeOGR(prof.iris$cercles, "OUT", "cercles_paris_activites", "ESRI Shapefile", overwrite=T)
writeOGR(prof.iris$rosaces, "OUT", "rosaces_paris_activites", "ESRI Shapefile", overwrite=T)
df = iris.df@data[,c("P12_CHOM1564", "P12_ETUD1564", "P12_RETR1564")]
chom.iris = radars(f=iris,
dat=df,
libelles=iris$NOM_IRIS,
fact=.7, mult=.9, exponent=2, minFactor=1/6,
method="power")
writeOGR(chom.iris$cercles, "OUT", "cercles_paris_chom", "ESRI Shapefile", overwrite=T)
writeOGR(chom.iris$rosaces, "OUT", "rosaces_paris_chom", "ESRI Shapefile", overwrite=T)
df = iris.df@data[,c("C12_ACTOCC15P_PAS", "C12_ACTOCC15P_MAR", "C12_ACTOCC15P_DROU", "C12_ACTOCC15P_VOIT", "C12_ACTOCC15P_TCOM")]
transp.iris = radars(f=iris,
dat=df,
fact=.7, mult=.9, exponent=2, minFactor=1/6,
libelles=f$NOM_IRIS,
method="power")
writeOGR(transp.iris$cercles, "OUT", "cercles_paris_transp", "ESRI Shapefile", overwrite=T)
writeOGR(transp.iris$rosaces, "OUT", "rosaces_paris_transp", "ESRI Shapefile", overwrite=T)
transp.iris = radars(f=iris,
dat=df,
fact=.7, mult=.9, exponent=2, minFactor=1/6,
libelles=iris$NOM_IRIS,
method="power")
plot(transp.iris$cercles); plot(transp.iris$rosaces, add=T)
writeOGR(transp.iris$cercles, "OUT", "cercles_paris_transp", "ESRI Shapefile", overwrite=T)
writeOGR(transp.iris$rosaces, "OUT", "rosaces_paris_transp", "ESRI Shapefile", overwrite=T)
